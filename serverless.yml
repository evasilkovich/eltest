service: eltest

frameworkVersion: '2'
plugins:
  - serverless-python-requirements

custom:
  deletionPolicy: Retain
  yamlStage: ${opt:stage, 'dev'}

package:
  exclude:
    - package.json
    - package-log.json
    - node_modules/**
    - cache/**
    - test/**
    - .pytest_cache/**
    - eltest_manifest.json


provider:
  name: aws
  runtime: python3.8
  lambdaHashingVersion: 20201221
  region: eu-central-1
  stage: ${self:custom.yamlStage}

  iamRoleStatements:
    - Effect: Allow
      Action:
        - s3:PutObject
      Resource:
        - "*"

    - Effect: Allow
      Action:
        - quicksight:*
      Resource:
        - "*"

  environment:
    MY_BUCKET: eltest-${opt:stage, 'dev'}
    ELTEST_DATA_SOURCE: eltest-${opt:stage, 'dev'}
    ACCOUNT_ID: !Sub '${AWS::AccountId}'
    STAGE: ${opt:stage, 'dev'}


functions:
  hello:
    handler: controllers/hello.handler
    events:
      - http:
          path: /hello
          method: get

  initQuickSight:
    handler: functions/init_func.handler

  refresh:
    handler: functions/refresh_data_set.handler


resources:
  Resources:

    MyBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.MY_BUCKET}
        NotificationConfiguration:
          LambdaConfigurations:
            -
              Event: "s3:ObjectCreated:*"
              Function:
                "Fn::GetAtt":
                  - RefreshLambdaFunction
                  - Arn

    RefreshLambdaPermission:
      Type: "AWS::Lambda::Permission"
      Properties:
        FunctionName:
          "Fn::GetAtt":
            - RefreshLambdaFunction
            - Arn
        Principal: "s3.amazonaws.com"
        Action: "lambda:InvokeFunction"
        SourceAccount:
          Ref: AWS::AccountId
        SourceArn:
          Fn::Join:
            - ""
            - - "arn:aws:s3:::"
              - ${self:provider.environment.MY_BUCKET}


    PutManifestToS3Resource:
      Type: Custom::PutManifestToS3Resource
      DependsOn: MyBucket
      Properties:
        ServiceToken:
          Fn::GetAtt: [InitQuickSightLambdaFunction, Arn]
        Bucket: ${self:provider.environment.MY_BUCKET}

